// Это можно сделать автоматически. В Node.js есть утилита, которая превращает относительный путь в абсолютный. Она называется path, а подключить его в файл можно функцией require:
const path = require('path'); // подключаем path к конфигу вебпак
const HtmlWebpackPlugin = require('html-webpack-plugin'); // подключите плагин чтобы мог "WEBPACK" работать с файлами html;        этот плагин является классом с помощью которого можно конструировать объекты
const { CleanWebpackPlugin } = require('clean-webpack-plugin'); // подключили плагин для удаления всей папки "dist" (папка сборки проекта) перед новой сборкой чтобы все содежимое папки "dist"  обновилось


// подключаем к проекту mini-css-extract-plugin (плагин чтобы скомпановать много файлов css в один; полезен так как по БЭМ методологии бывает кучу css файлов , а если их при сборке склеить в конечном итоге будет сайт побыстрее)
const MiniCssExtractPlugin = require('mini-css-extract-plugin'); 


module.exports = {
  entry: { main: './src/scripts/index.js' },
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'main.js',
    publicPath: ''
  },
  mode: 'development',
  devServer: {
    static: path.resolve(__dirname, './dist'), // путь, куда "смотрит" режим разработчика
    compress: true, // это ускорит загрузку в режиме разработки
    port: 8080, // порт, чтобы открывать сайт по адресу localhost:8080, но можно поменять порт

    open: true // сайт будет открываться сам при запуске npm run dev
  },
  module: {
    rules: [ // rules — это массив правил
      // добавим в него объект правил для бабеля
      {
        // регулярное выражение, которое ищет все js файлы
        test: /\.js$/,
        // при обработке этих файлов нужно использовать babel-loader
        use: 'babel-loader',
        // исключает папку node_modules, файлы в ней обрабатывать не нужно
        exclude: '/node_modules/'
      },
      {
        // регулярное выражение, которое ищет все файлы с такими расширениями (картинки и шрифты)
        test: /\.(png|svg|jpg|gif|woff(2)?|eot|ttf|otf)$/,
        type: 'asset/resource'
      },
      // добавьте ещё одно правило для склейки кучу css файлов в один:
      {
        // применять это правило только к CSS-файлам
        test: /\.css$/,
        // при обработке этих файлов нужно использовать
        // MiniCssExtractPlugin.loader и css-loader
        use: [MiniCssExtractPlugin.loader, {
          loader: 'css-loader',
          options: { importLoaders: 1 }
        }, 'postcss-loader' ]
      }
    ]
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: './src/index.html' // путь к файлу index.html к которому мы будем подключать скрипты отформатированные babel'ем и webpack'ом
    }),
    new CleanWebpackPlugin(),
    new MiniCssExtractPlugin() // подключение плагина для объединения css файлов 
  ]
}



//! учим наш сборщик склеивать много css файлов в один чтобы сайт был оптимизированнее + добавлять префиксы
//? появилась возможность добавлять картинки и шрифты (но только те, к-е используются)
//* подключили плагин чтобы мог "WEBPACK" работать с файлами html (ключ "plugins" который является массивом с плагинами для webpack) ; этот плагин является классом с помощью которого можно конструировать объекты;
//* так же подключили автоматическое удаление папки "dist" (папка собанного проекта) перед новой сборкой для обновления конечной сборки
//! подключаем функциональность BABEL который помогает поддерживать старые версии браузера (ключ module);
//! Наше правило звучит так: «если тебе попадётся файл с расширением .js, сначала отдай этот файл модулю babel-loader, а затем добавляй в сборку. Но не применяй это правило к пакетам, скачанным из NPM, которые лежат в папке node_modules».
//? Теперь добавили настройки локального сервера
//?добавили режим разработчика
//* output - указали, в какой файл будет собираться весь js, и дали ему имя (результат сборки куда будем ложить);  Есть одна трудность. Webpack не понимает относительный путь для точки выхода. Поэтому в свойство path нужно обязательно записывать абсолютный путь, то есть путь от корневой папки.
//*переписали точку выхода, используя утилиту path 
//! entry: указали первое место, куда заглянет webpack, — файл index.js в папке src (что будет преобразовывать и превращать в финальную сборку) 
//? module.exports — это синтаксис экспорта в Node.js 